#Generating the general hkl file

import ubmatrix as ub
import math
import numpy as np

def calc_theta(h, k, l, maxi):
    pars = [5.553, 7.955, 5.561, 90, 90, 90]
    a = pars[0]; b = pars[1]; c = pars[2]
    alpha = math.radians(pars[3]); beta = math.radians(pars[5]); gamma = math.radians(pars[4])
    if alpha == beta and abs(math.pi/2 - alpha) < 0.0001: #Ortho, tera, hexa, cubic
        if a != b: #ortho
            print "Orthorhombic!"
            val = h**2/a**2 + k**2/b**2 + l**2/c**2
            
        elif a != c: #Tetra, hexa
            if abs(gamma - 2*math.pi/3) <= 0.00001: #Hexa
                print "Hexagonal!"
                val = 4.0/3 * ((h**2 + h*k + k**2)/a**2) + l**2/c**2
                
            else: #Tetra
                print "Tetragonal!"
                assert abs(gamma - math.pi/2) <= 0.00001, "Check your if statements in the determination of lattoice shape"
                val = (h**2 + k**2)/a**2 + l**2/c**2
                
        else: #cubic
            print "Cubic!"
            val = (h**2 + k**2 + l**2)/a**2
            
    elif alpha == beta and alpha == gamma and abs(math.pi/2 - alpha) < 0.0001: #Rombo
        assert a == b, "Something is wrong with this crystal. It's rhombohedral but not."
        assert b == c, "Something is wrong with this crystal. It's rhombohedral but not."
        assert a == c, "Something is wrong with this crystal. It's rhombohedral but not."
        
        print "Rhombohedral!"
        denom = a**2*(1 - 3*(math.cos(alpha))**2 + 2*(math.cos(alpha))**3)
        val = (h**2 + k**2 + l**2)*math.sin(alpha)**2 + 2*(h*k + k*l + h*l)*((math.cos(alpha))**2 - math.cos(alpha))
        
    else: #mono or tri
        if beta == gamma and abs(math.pi/2 - alpha) < 0.0001: #mono
            print "Monoclinic!"
            val = 1/math.sin(beta)**2 * \
                (h**2/a**2 + \
                (k**2 * math.sin(beta)**2)/b**2 + \
                l**2/c**2 - \
                2*h*l*math.cos(beta)/(a*c))
            
        else: #tri
            print "Triclinic!"
            #The worst equation ever
            V=2*a*b*c*\
            np.sqrt(np.sin((alpha+beta+gamma)/2)*\
                   np.sin((-alpha+beta+gamma)/2)*\
                   np.sin((alpha-beta+gamma)/2)*\
                   np.sin((alpha+beta-gamma)/2))
            
            S11 = (b*c*math.sin(alpha))**2
            S22 = (a*c*math.sin(beta))**2
            S33 = (a*b*math.sin(gamma))**2
            S12 = a*b*c**2 * (math.cos(alpha)*math.cos(beta) - math.cos(gamma))
            S23 = a**2*b*c * (math.cos(beta)*math.cos(gamma) - math.cos(alpha))
            S31 = a*b**2*c * (math.cos(alpha)*math.cos(gamma) - math.cos(beta))
            val = 1/V**2 * (S11*h**2 + S22*k**2 + S33*l**2 + 2*S12*h*k + 2*S23*k*l + 2*S31*h*l)
    
    print val
    d = math.sqrt(1/val)
    if 1.5418/(2*d) > maxi:
        theta = math.degrees(math.asin(1))
        return theta
    
    theta = math.degrees(math.asin(1.5418/(2*d)))        
    return theta

def main():
    #Write in parameters
    f = open('all_hkls.txt', 'w')
    f.write('5.55300\n7.95500\n5.56100\n90.000000\n90.000000\n90.000000\n1.5418\n')
    
    maxi = 1.0
    for h in range(-20, 21):
        for k in range(-20, 21):
            for l in range(-20, 21):
                if h != 0 or k != 0 or l != 0:
                    theta = calc_theta(h, k, l, maxi)
                    intensity = np.random.pareto(1, 1) * 50
                    intensity = intensity[0]
                    
                    #modeling realistic structure factors
                    steepness = 0.1
                    expon = abs(h) + abs(k) + abs(l)
                    denom = 3.0/(1 + math.e**(steepness*expon)) + 1
                    structurefac = math.sqrt(intensity)/denom
                    f.write(str(h) + '\t' + str(k) + '\t' + str(l) + '\t' + \
                            str(theta) + '\t' + \
                            "0 "*7 + str(intensity) + '\t' \
                            + str(structurefac))
                    f.write('\n')
                
    f.close()
                    
                
main()
